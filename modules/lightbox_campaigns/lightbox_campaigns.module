<?php

/**
 * @file
 * Lightbox Campaigns module file.
 */

use Drupal\Core\TempStore\TempStoreException;

/**
 * Implements hook_theme().
 */
function lightbox_campaigns_theme() {
  return [
    'lightbox_campaign' => [
      'render element' => 'elements',
    ],
    'field__lightbox_campaign__body' => [
      'base hook' => 'field',
    ],
  ];
}

/**
 * Prepares variables for the lightbox_campaign templates.
 *
 * Default template: lightbox_campaign.html.twig.
 *
 * @param array $variables
 *   An associative array containing two primary things:
 *   - elements: An array of elements to display in view mode.
 *   - attributes: An array of attributes for the parent element.
 */
function template_preprocess_lightbox_campaign(array &$variables) {
  /* @var \Drupal\lightbox_campaigns\Entity\LightboxCampaign $campaign */
  $campaign = $variables['elements']['#lightbox_campaign'];
  // Attach module libraries.
  $variables['#attached'] = ['library' => ['lightbox_campaigns/featherlight']];
  // Add a custom data attribute with the campaign ID.
  $variables['attributes']['data-lightbox-campaigns-entity-id'] = $campaign->id();
  // Give the content an initial hidden state.
  $variables['attributes']['class'] = ['lightbox-campaigns-campaign'];
}

/**
 * Implements hook_page_attachments().
 *
 * Loads the featherlight library assets if campaigns will be loaded on the
 * current page.
 */
function lightbox_campaigns_page_attachments(array &$page) {
  $campaigns = _lightbox_campaigns_load();
  if (!empty($campaigns)) {
    $page['#attached']['library'][] = 'lightbox_campaigns/featherlight';

    $settings = &$page['#attached']['drupalSettings']['lightbox_campaigns'];

    /* @var \Drupal\lightbox_campaigns\Entity\LightboxCampaign $campaign */
    foreach ($campaigns as $id => $campaign) {
      $settings[] = [
        'id' => $id,
        'callback' => \Drupal::service('url_generator')->generateFromRoute(
            'lightbox_campaign.lightbox',
            ['lightbox_campaign' => $id]
        ),
        'prevent_trigger' => $campaign->get('prevent_trigger')->value,
        'reset_timer' => $campaign->get('reset')->value,
      ];
    }
  }
}

/**
 * Load enabled campaigns with passing visibility tests.
 *
 * @return array
 *   An array of fully loaded LightboxCampaign objects that should be loaded.
 *
 * @see \Drupal\lightbox_campaigns\Plugin\RulesAction\DisplayCampaign::doExecute()
 */
function _lightbox_campaigns_load() {
  $load = &drupal_static(__FUNCTION__);

  if (!isset($load)) {

    /* @var \Drupal\Core\TempStore\PrivateTempStore $temp_store */
    $temp_store = \Drupal::service('tempstore.private')
      ->get('lightbox_campaigns');

    // Check for assigned Campaigns from Rules configurations.
    $rule_id = 'lightbox_campaigns_rules_action_display_campaign';
    if ($rules_campaigns = $temp_store->get($rule_id)) {
      try {
        $temp_store->delete($rule_id);
      }
      catch (TempStoreException $e) {
        watchdog_exception('loyalist', $e);
      }
    }
    else {
      $rules_campaigns = [];
    }

    $load = [];
    $campaigns = \Drupal::service('entity_type.manager')
      ->getStorage('lightbox_campaign')
      ->loadByProperties(['enable' => TRUE]);

    /* @var \Drupal\lightbox_campaigns\Entity\LightboxCampaign $campaign */
    foreach ($campaigns as $campaign) {
      if ($campaign->shouldDisplay(isset($rules_campaigns[$campaign->id()]))) {
        $load[$campaign->id()] = $campaign;
      }
    }
  }

  return $load;
}
